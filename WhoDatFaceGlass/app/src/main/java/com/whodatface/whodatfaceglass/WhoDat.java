package com.whodatface.whodatfaceglass;

import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.google.android.glass.media.Sounds;

import android.app.Activity;
import android.content.Intent;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.entity.mime.*;
import org.apache.http.util.EntityUtils;
import org.json.*;

import java.io.IOException;

/**
 * An {@link Activity} that recognizes a face and returns corresponding Facebook data
 */
public class WhoDat extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view
     */
    private CardScrollView mCardScroller;

    /**
     * {@link View} generated by {@link #buildView()}
     */
    private View mView;

    /**
     * {@link Camera} for getting images of face
     */
    private Camera camera;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        // Set up view
        mView = buildView("Tap to recognize!");

        // Set up camera
        camera = Camera.open();

        // Set up scroll view
        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        // Handle the tap event
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Take picture
                camera.takePicture(null, null, uploadToServer);

                // Plays sound to indicate that TAP actions has succeeded
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.SUCCESS);
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class
     */
    private View buildView(String text) {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);
        card.setText(text);
        return card.getView();
    }

    /**
     * Uploads a picture to server and retrieves a recognition response
     */
    private PictureCallback uploadToServer = new PictureCallback() {
        @Override
        public void onPictureTaken(byte[] data, Camera camera) {
            HttpClient client = new DefaultHttpClient();
            HttpPost post = new HttpPost("45.33.64.146:3000/recognize");
            MultipartEntityBuilder entityBuilder = MultipartEntityBuilder.create();
            entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
            entityBuilder.addTextBody("accessToken", "@string/access_token");
            entityBuilder.addBinaryBody("Content", data);
            HttpEntity entity = entityBuilder.build();
            post.setEntity(entity);
            try {
                HttpResponse response = client.execute(post);
                HttpEntity httpEntity = response.getEntity();
                String result = EntityUtils.toString(httpEntity);
                // JSONObject json = new JSONObject(result);
                Log.i("JSON Response", result);
                mView = buildView(result);
            }
            catch (IOException e) {
                Log.e("IOException", "In post execution");
            }
            // catch (JSONException e) {
            //     Log.e("JSONException", "In response parsing");
            // }
        }
    };
}