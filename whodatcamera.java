package com.example.aaron.whodatface;

        import java.io.File;
        import java.io.FileNotFoundException;
        import java.io.FileOutputStream;
        import java.io.IOException;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        import android.view.View;

        import com.google.android.glass.touchpad.Gesture;
        import com.google.android.glass.touchpad.GestureDetector;

        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Environment;
        import android.provider.MediaStore.Files.FileColumns;
        import android.app.Activity;
        import android.content.Context;
        import android.hardware.Camera;
        import android.hardware.Camera.PictureCallback;
        import android.util.Log;
        import android.view.Menu;
        import android.view.MotionEvent;
        import android.view.SurfaceHolder;
        import android.view.SurfaceView;
        import android.view.WindowManager;
        import android.widget.FrameLayout;
        import com.google.android.glass.widget.CardScrollView;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class whodatcamera extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    /*
    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }
    */

 /*
    final File parentDirectory = pictureFile.getParentFile();
    observor = new FileObserver(parentDirectory.getpath()) {
        private boolean isFileWritten;

        @Override
        public void onEvent(int event, String path) {
            if(!isFileWritten) {
                File affectedFile = new File(parentDirectory, path);

                isFileWritten = (event == FileObserver.CLOSE_WRITE && affectedFile.equals(pictureFile));

                if(isFileWritten) {
                    stopWatching();

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            processPictureWhenReady(picturePath);
                        }
                    });
                }
            }
        }
    };

    observor.startWatching();
*/
    public class CameraView extends SurfaceView implements SurfaceHolder.Callback
    {
        private SurfaceHolder surfaceHolder = null;
        private Camera camera = null;

        @SuppressWarnings("deprecation")
        public CameraView(Context context)
        {
            super(context);
            surfaceHolder = this.getHolder();
            surfaceHolder.addCallback(this);
            surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        }

        @Override
        public void surfaceCreated(SurfaceHolder holder)
        {
            camera = Camera.open();

            // Set the Hotfix for Google Glass
            this.setCameraParameters(camera);

            // Show the Camera display
            try
            {
                camera.setPreviewDisplay(holder);
            }
            catch (Exception e)
            {
                this.releaseCamera();
            }
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height)
        {
            // Start the preview for surfaceChanged
            if (camera != null)
            {
                camera.startPreview();
            }
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder)
        {
            // Do not hold the camera during surfaceDestroyed - view should be gone
            this.releaseCamera();
        }

        public void setCameraParameters(Camera camera)
        {
            if (camera != null)
            {
                Parameters parameters = camera.getParameters();
                parameters.setPreviewFpsRange(30000, 30000);
                camera.setParameters(parameters);
            }
        }

        public void releaseCamera()
        {
            if (camera != null)
            {
                camera.release();
                camera = null;
            }
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        // Initiate CameraView
        cameraView = new CameraView(this);

        // Turn on Gestures
        mGestureDetector = createGestureDetector(this);

        setContentView(cameraView);
    }

    private GestureDetector createGestureDetector(Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);
        gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                if(cameraView != null) {
                    if(gesture == Gesture.TAP){
                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        if(intent != null) {
                            startActivityForResult(intent, TAKE_PICTURE_REQUEST);
                        }
                        return true;
                    }
                }
                return false;
            }
        });
        return gestureDetector;
    }

    @Override
    public boolean onGenericMotionEvent(MotionEvent event)
    {
        if(mGestureDetector != null)
            return mGestureDetector.onMotionEvent(event);
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);
        return card.getView();
    }

}
